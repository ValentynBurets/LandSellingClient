{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Valentyn\\\\study\\\\graduate work\\\\LandSellingWebsite\\\\LandSellingWebsite\\\\ClientApp\\\\client_app\\\\src\\\\Pages\\\\StartPage\\\\Component\\\\LoginForm\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport \"../../AuthorizeBox.sass\";\nimport resources from \"../../../../../../jsonData/English/StartPage.json\";\nimport connection from \"../../../../../../jsonData/ConnectionConfig.json\";\nimport { React, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\nimport AuthorizeService from \"../../../../Services/AuthorizeService\";\nimport { useAuth } from \"../../../../Components/Services/AuthProvider/AuthProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const currentHistory = useHistory();\n  const {\n    login\n  } = useAuth();\n  const [formState, setFormState] = useState({\n    email: \"\",\n    password: \"\",\n    passwordVisible: false,\n    validated: false,\n    authorizedState: false,\n    authorizedMessage: \"\",\n    errorMessage: \"\"\n  });\n  const passwordValidPattern = \"(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}:;<>,.?~_+-=|]).{10,25}$\";\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    setFormState(prev => {\n      return { ...prev,\n        validated: true\n      };\n    });\n    const isFormValid = event.currentTarget.checkValidity();\n\n    if (isFormValid) {\n      const userData = {\n        email: formState.email,\n        password: formState.password\n      };\n      AuthorizeService.request(userData, connection.ServerUrl + connection.Routes.Login).then(response => {\n        if (response.authorize === true) {\n          // Set jwt token\n          localStorage.setItem(\"token\", response.token);\n          let receivedUser = login();\n\n          switch (receivedUser.role) {\n            case \"Customer\":\n              currentHistory.push(\"/new_order\");\n              break;\n\n            case \"Employee\":\n              currentHistory.push(\"/employee_order_page\");\n              break;\n\n            case \"Admin\":\n              currentHistory.push(\"/user_list\");\n              break;\n          }\n        } else {\n          let error = resources.AuthorizeBox.LoginTab.ErrorText.IncorrectData;\n          setFormState(prev => {\n            return { ...prev,\n              authorizedState: response.authorize,\n              authorizedMessage: response.message,\n              errorMessage: error\n            };\n          });\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    noValidate: true,\n    validated: formState.validated,\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message-box\",\n      style: {\n        visibility: Boolean(formState.errorMessage) ? \"visible\" : \"hidden\"\n      },\n      children: formState.errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      controlId: \"userEmail\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: resources.AuthorizeBox.LoginTab.Labels.Email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          value: formState.email,\n          onChange: event => setFormState(prev => {\n            return { ...prev,\n              email: event.target.value\n            };\n          }),\n          className: \"ig-form-control\",\n          type: \"email\",\n          placeholder: resources.AuthorizeBox.LoginTab.Placeholders.Email,\n          maxLength: 30,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: resources.AuthorizeBox.LoginTab.InvalidText.Email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-4\",\n      controlId: \"userPassword\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: resources.AuthorizeBox.LoginTab.Labels.Password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          value: formState.password,\n          onChange: event => setFormState(prev => {\n            return { ...prev,\n              password: event.target.value\n            };\n          }),\n          className: \"ig-form-control\",\n          type: formState.passwordVisible === true ? \"text\" : \"password\",\n          placeholder: resources.AuthorizeBox.LoginTab.Placeholders.Password,\n          pattern: passwordValidPattern,\n          maxLength: 30,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n          onClick: () => setFormState(prev => {\n            return { ...prev,\n              passwordVisible: !prev.passwordVisible\n            };\n          }),\n          class: formState.passwordVisible ? \"bi bi-eye fs-4 eye-icon\" : \"bi bi-eye-slash fs-4 eye-icon\",\n          style: {\n            marginLeft: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n          type: \"invalid\",\n          children: resources.AuthorizeBox.LoginTab.InvalidText.Password\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"text-center mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        className: \"submit-button\",\n        children: resources.AuthorizeBox.LoginTab.ButtonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginForm, \"93L1CPWCHwwe/OVGt8t1JoTDg7c=\", false, function () {\n  return [useHistory, useAuth];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["C:/Users/Valentyn/study/graduate work/LandSellingWebsite/LandSellingWebsite/ClientApp/client_app/src/Pages/StartPage/Component/LoginForm/LoginForm.js"],"names":["resources","connection","React","useState","useHistory","Form","Button","InputGroup","AuthorizeService","useAuth","LoginForm","currentHistory","login","formState","setFormState","email","password","passwordVisible","validated","authorizedState","authorizedMessage","errorMessage","passwordValidPattern","handleSubmit","event","preventDefault","prev","isFormValid","currentTarget","checkValidity","userData","request","ServerUrl","Routes","Login","then","response","authorize","localStorage","setItem","token","receivedUser","role","push","error","AuthorizeBox","LoginTab","ErrorText","IncorrectData","message","visibility","Boolean","Labels","Email","target","value","Placeholders","InvalidText","Password","marginLeft","ButtonText"],"mappings":";;;AAAA,OAAO,yBAAP;AACA,OAAOA,SAAP,MAAsB,mDAAtB;AACA,OAAOC,UAAP,MAAuB,kDAAvB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,UAAvB,QAAyC,iBAAzC;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;AACA,SAASC,OAAT,QAAwB,2DAAxB;;AAEA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAEhC,QAAMC,cAAc,GAAGP,UAAU,EAAjC;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAYH,OAAO,EAAzB;AAEA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC;AACvCY,IAAAA,KAAK,EAAE,EADgC;AAEvCC,IAAAA,QAAQ,EAAE,EAF6B;AAGvCC,IAAAA,eAAe,EAAE,KAHsB;AAIvCC,IAAAA,SAAS,EAAE,KAJ4B;AAKvCC,IAAAA,eAAe,EAAE,KALsB;AAMvCC,IAAAA,iBAAiB,EAAE,EANoB;AAOvCC,IAAAA,YAAY,EAAE;AAPyB,GAAD,CAA1C;AAUA,QAAMC,oBAAoB,GAAG,6EAA7B;;AAEA,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzBA,IAAAA,KAAK,CAACC,cAAN;AAEAX,IAAAA,YAAY,CAACY,IAAI,IAAI;AAAE,aAAO,EAAE,GAAGA,IAAL;AAAWR,QAAAA,SAAS,EAAE;AAAtB,OAAP;AAAqC,KAAhD,CAAZ;AAEA,UAAMS,WAAW,GAAGH,KAAK,CAACI,aAAN,CAAoBC,aAApB,EAApB;;AAEA,QAAIF,WAAJ,EAAiB;AACb,YAAMG,QAAQ,GAAG;AACbf,QAAAA,KAAK,EAAEF,SAAS,CAACE,KADJ;AAEbC,QAAAA,QAAQ,EAAEH,SAAS,CAACG;AAFP,OAAjB;AAKAR,MAAAA,gBAAgB,CAACuB,OAAjB,CAAyBD,QAAzB,EAAmC7B,UAAU,CAAC+B,SAAX,GAAuB/B,UAAU,CAACgC,MAAX,CAAkBC,KAA5E,EAAmFC,IAAnF,CAAwFC,QAAQ,IAAI;AAChG,YAAIA,QAAQ,CAACC,SAAT,KAAuB,IAA3B,EAAiC;AAC7B;AACAC,UAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,QAAQ,CAACI,KAAvC;AAEA,cAAIC,YAAY,GAAG7B,KAAK,EAAxB;;AAEA,kBAAQ6B,YAAY,CAACC,IAArB;AACI,iBAAK,UAAL;AACI/B,cAAAA,cAAc,CAACgC,IAAf,CAAoB,YAApB;AACA;;AACJ,iBAAK,UAAL;AACIhC,cAAAA,cAAc,CAACgC,IAAf,CAAoB,sBAApB;AACA;;AACJ,iBAAK,OAAL;AACIhC,cAAAA,cAAc,CAACgC,IAAf,CAAoB,YAApB;AACA;AATR;AAWH,SAjBD,MAkBK;AACD,cAAIC,KAAK,GAAG5C,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCC,SAAhC,CAA0CC,aAAtD;AAEAlC,UAAAA,YAAY,CAACY,IAAI,IAAI;AACjB,mBAAO,EACH,GAAGA,IADA;AAEHP,cAAAA,eAAe,EAAEiB,QAAQ,CAACC,SAFvB;AAGHjB,cAAAA,iBAAiB,EAAEgB,QAAQ,CAACa,OAHzB;AAIH5B,cAAAA,YAAY,EAAEuB;AAJX,aAAP;AAMH,WAPW,CAAZ;AAQH;AACJ,OA/BD;AAgCH;AACJ;;AAED,sBACI,QAAC,IAAD;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,SAAS,EAAE/B,SAAS,CAACK,SAAtC;AAAiD,IAAA,QAAQ,EAAEK,YAA3D;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,MAAA,KAAK,EAAE;AAAE2B,QAAAA,UAAU,EAAEC,OAAO,CAACtC,SAAS,CAACQ,YAAX,CAAP,GAAkC,SAAlC,GAA8C;AAA5D,OAA1C;AAAA,gBACKR,SAAS,CAACQ;AADf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC,WAAvC;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA,kBAAarB,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCM,MAAhC,CAAuCC;AAApD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAA,gCACI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,KAAK,EAAExC,SAAS,CAACE,KAA/B;AAAsC,UAAA,QAAQ,EAAGS,KAAD,IAAWV,YAAY,CAACY,IAAI,IAAI;AAAE,mBAAO,EAAE,GAAGA,IAAL;AAAWX,cAAAA,KAAK,EAAES,KAAK,CAAC8B,MAAN,CAAaC;AAA/B,aAAP;AAAgD,WAA3D,CAAvE;AACI,UAAA,SAAS,EAAC,iBADd;AACgC,UAAA,IAAI,EAAC,OADrC;AAC6C,UAAA,WAAW,EAAEvD,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCU,YAAhC,CAA6CH,KADvG;AAC8G,UAAA,SAAS,EAAE,EADzH;AAEI,UAAA,QAAQ;AAFZ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,UAAA,IAAI,EAAC,SAA5B;AAAA,oBAAuCrD,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCW,WAAhC,CAA4CJ;AAAnF;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAeI,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,MAAtB;AAA6B,MAAA,SAAS,EAAC,cAAvC;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAA,kBAAarD,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCM,MAAhC,CAAuCM;AAApD;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAA,gCACI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,KAAK,EAAE7C,SAAS,CAACG,QAA/B;AAAyC,UAAA,QAAQ,EAAGQ,KAAD,IAAWV,YAAY,CAACY,IAAI,IAAI;AAAE,mBAAO,EAAE,GAAGA,IAAL;AAAWV,cAAAA,QAAQ,EAAEQ,KAAK,CAAC8B,MAAN,CAAaC;AAAlC,aAAP;AAAkD,WAA7D,CAA1E;AACI,UAAA,SAAS,EAAC,iBADd;AACgC,UAAA,IAAI,EAAE1C,SAAS,CAACI,eAAV,KAA8B,IAA9B,GAAqC,MAArC,GAA8C,UADpF;AAEI,UAAA,WAAW,EAAEjB,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCU,YAAhC,CAA6CE,QAF9D;AAEwE,UAAA,OAAO,EAAEpC,oBAFjF;AAEuG,UAAA,SAAS,EAAE,EAFlH;AAEsH,UAAA,QAAQ;AAF9H;AAAA;AAAA;AAAA;AAAA,gBADJ,eAIQ;AAAG,UAAA,OAAO,EAAE,MAAMR,YAAY,CAACY,IAAI,IAAI;AAAE,mBAAO,EAAE,GAAGA,IAAL;AAAWT,cAAAA,eAAe,EAAE,CAAES,IAAI,CAACT;AAAnC,aAAP;AAA8D,WAAzE,CAA9B;AAA0G,UAAA,KAAK,EAAGJ,SAAS,CAACI,eAAV,GAA4B,yBAA5B,GAAwD,+BAA1K;AAA2M,UAAA,KAAK,EAAE;AAAC0C,YAAAA,UAAU,EAAC;AAAZ;AAAlN;AAAA;AAAA;AAAA;AAAA,gBAJR,eAKI,QAAC,IAAD,CAAM,OAAN,CAAc,QAAd;AAAuB,UAAA,IAAI,EAAC,SAA5B;AAAA,oBAAuC3D,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCW,WAAhC,CAA4CC;AAAnF;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAfJ,eAgCI,QAAC,IAAD,CAAM,KAAN;AAAY,MAAA,SAAS,EAAC,kBAAtB;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAwC,QAAA,SAAS,EAAC,eAAlD;AAAA,kBAAmE1D,SAAS,CAAC6C,YAAV,CAAuBC,QAAvB,CAAgCc;AAAnG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAhCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH;;GAvGuBlD,S;UAEGN,U,EACLK,O;;;KAHEC,S","sourcesContent":["import \"../../AuthorizeBox.sass\";\r\nimport resources from \"../../../../../../jsonData/English/StartPage.json\";\r\nimport connection from \"../../../../../../jsonData/ConnectionConfig.json\";\r\nimport { React, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport AuthorizeService from \"../../../../Services/AuthorizeService\";\r\nimport { useAuth } from \"../../../../Components/Services/AuthProvider/AuthProvider\";\r\n\r\nexport default function LoginForm() {\r\n\r\n    const currentHistory = useHistory();\r\n    const { login } = useAuth();\r\n\r\n    const [formState, setFormState] = useState({\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordVisible: false,\r\n        validated: false,\r\n        authorizedState: false,\r\n        authorizedMessage: \"\",\r\n        errorMessage: \"\"\r\n    });\r\n\r\n    const passwordValidPattern = \"(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}:;<>,.?~_+-=|]).{10,25}$\";\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        setFormState(prev => { return { ...prev, validated: true } });\r\n\r\n        const isFormValid = event.currentTarget.checkValidity();\r\n\r\n        if (isFormValid) {\r\n            const userData = {\r\n                email: formState.email,\r\n                password: formState.password\r\n            }\r\n\r\n            AuthorizeService.request(userData, connection.ServerUrl + connection.Routes.Login).then(response => {\r\n                if (response.authorize === true) {\r\n                    // Set jwt token\r\n                    localStorage.setItem(\"token\", response.token);\r\n\r\n                    let receivedUser = login();\r\n\r\n                    switch (receivedUser.role) {\r\n                        case \"Customer\":\r\n                            currentHistory.push(\"/new_order\");\r\n                            break;\r\n                        case \"Employee\":\r\n                            currentHistory.push(\"/employee_order_page\");\r\n                            break;\r\n                        case \"Admin\":\r\n                            currentHistory.push(\"/user_list\");\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    let error = resources.AuthorizeBox.LoginTab.ErrorText.IncorrectData;\r\n\r\n                    setFormState(prev => {\r\n                        return {\r\n                            ...prev,\r\n                            authorizedState: response.authorize,\r\n                            authorizedMessage: response.message,\r\n                            errorMessage: error\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form noValidate validated={formState.validated} onSubmit={handleSubmit}>\r\n            {/* Display this block if errorMessage not empty */}\r\n            <div className=\"error-message-box\" style={{ visibility: Boolean(formState.errorMessage) ? \"visible\" : \"hidden\" }}>\r\n                {formState.errorMessage}</div>\r\n\r\n            <Form.Group className=\"mb-3\" controlId=\"userEmail\">\r\n                <Form.Label>{resources.AuthorizeBox.LoginTab.Labels.Email}</Form.Label>\r\n                <InputGroup>\r\n                    <Form.Control value={formState.email} onChange={(event) => setFormState(prev => { return { ...prev, email: event.target.value }; })}\r\n                        className=\"ig-form-control\" type=\"email\" placeholder={resources.AuthorizeBox.LoginTab.Placeholders.Email} maxLength={30}\r\n                        required />\r\n                    <Form.Control.Feedback type=\"invalid\">{resources.AuthorizeBox.LoginTab.InvalidText.Email}</Form.Control.Feedback>\r\n                </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group className=\"mb-4\" controlId=\"userPassword\">\r\n                <Form.Label>{resources.AuthorizeBox.LoginTab.Labels.Password}</Form.Label>\r\n                <InputGroup>\r\n                    <Form.Control value={formState.password} onChange={(event) => setFormState(prev => { return { ...prev, password: event.target.value } })}\r\n                        className=\"ig-form-control\" type={formState.passwordVisible === true ? \"text\" : \"password\"}\r\n                        placeholder={resources.AuthorizeBox.LoginTab.Placeholders.Password} pattern={passwordValidPattern} maxLength={30} required />\r\n                        <i onClick={() => setFormState(prev => { return { ...prev, passwordVisible: !(prev.passwordVisible) } })} class={ formState.passwordVisible ? \"bi bi-eye fs-4 eye-icon\" : \"bi bi-eye-slash fs-4 eye-icon\"} style={{marginLeft:\"10px\"}}></i>\r\n                    <Form.Control.Feedback type=\"invalid\">{resources.AuthorizeBox.LoginTab.InvalidText.Password}</Form.Control.Feedback>\r\n                </InputGroup>\r\n            </Form.Group>\r\n\r\n            {/* <Form.Group className=\"mb-4\" controlId=\"showPasswordButton\">\r\n                <Form.Text className=\"text-muted me-2\">{resources.AuthorizeBox.LoginTab.Labels.ShowPasswordButton}</Form.Text>\r\n                <input value={formState.passwordVisible} onChange={() => setFormState(prev => { return { ...prev, passwordVisible: !(prev.passwordVisible) } })}\r\n                    type=\"checkbox\" />\r\n            </Form.Group> */}\r\n\r\n            <Form.Group className=\"text-center mt-3\">\r\n                <Button variant=\"primary\" type=\"submit\" className=\"submit-button\">{resources.AuthorizeBox.LoginTab.ButtonText}</Button>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}